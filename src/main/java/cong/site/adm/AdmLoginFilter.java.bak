package cong.site.adm;

import com.wwl.entity.Admin;
import cong.common.dao.BaseDao;
import cong.common.util.Config;
import jodd.props.Props;
import jodd.util.StringUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import javax.servlet.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import java.io.IOException;
import java.util.ArrayList;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Created by cong on 2014/11/8.
 */
public class AdmLoginFilter implements Filter {

  private static final Logger log = LoggerFactory.getLogger(AdmLoginFilter.class);

  private String prefix = "/adm";
  private String loginPage = "/adm/login.jsp";
  private Pattern exceptionPattern;
  private String mainPage;

  public void destroy() {
  }

  public void doFilter(ServletRequest req, ServletResponse resp, FilterChain chain) throws ServletException, IOException {
    final HttpServletRequest request = (HttpServletRequest) req;
    final HttpServletResponse response = (HttpServletResponse) resp;
    final HttpSession session = request.getSession();

    boolean isLogin = false;
    String errorMsg = "";
    Admin user = (Admin) session.getAttribute("user");
    final BaseDao dao = new BaseDao();
    if (user != null) {
      //首先检查是否登陆，如果已登录，就什么都不做。不管权限问题。
      isLogin = true;
      if (loginPage.equals(request.getRequestURI())) {
        response.sendRedirect(mainPage);
      }
      errorMsg = "已登录";
    } else {
      //检查是不是有用户名密码参数
      final String username = request.getParameter("username");
      final String password = request.getParameter("password");
      if (StringUtil.isBlank(username) || StringUtil.isBlank(password)) {
        errorMsg = "用户名或密码不能为空";
      } else {
        //用户名密码不空，进入数据库查询
        final ArrayList<Admin> admins = dao.queryByField(Admin.class, "id", username);
        if (admins.size() > 0) {
          user = admins.get(0);
        }
        if (user == null) {
          errorMsg = "用户名不存在";
        } else {
          String realPwd = user.getPwd();
          if (realPwd.equals(Admin.encryptPwd(password))) {
            session.setAttribute("user", user);
            isLogin = true;
            response.sendRedirect(mainPage);
          } else {
            errorMsg = "用户名或密码错误";
          }
        }
      }
    }

    boolean toLogin = true;
    if (!isLogin) {
      final String uri = request.getRequestURI();
      final String uriPostfix = uri.substring(prefix.length());
      final Matcher matcher = exceptionPattern.matcher(uriPostfix);
      toLogin = !matcher.find();
    }


    if (!isLogin && toLogin) {
      session.setAttribute("errorMsg", errorMsg);
      log.debug("errorMsg : {}", errorMsg);
      request.getRequestDispatcher(loginPage).forward(request, response);
    }else{
      chain.doFilter(req, resp);
    }


  }


  public void init(FilterConfig config) throws ServletException {
    final Props props = Config.load();
    prefix = props.getValue("adm.prefix");
    loginPage = props.getValue("adm.loginPage");
    mainPage = props.getValue("adm.mainPage");
    exceptionPattern = Pattern.compile(props.getValue("adm.exceptionPattern"));
  }

}
